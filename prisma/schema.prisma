// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model Users{
  id        String  @id @default(uuid())
  firstName String
  lastName  String
  email     String  @unique
  password  String
  avatarUrl String?
  role      String  @default("CUSTOMER")
  active    Boolean @default(false)
  ActivateToken ActivateToken[]
  reviews  Review[]
  orders   Orders[]
}

model ActivateToken{
  id            String @id @default(uuid())
  token         String @unique
  activatedAt   DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user Users @relation(fields: [userId],references: [id])
  userId        String

  @@index([userId])
}
model Category {
   id           String  @id @default(uuid())
  name          String
  thumbnail     String
  products      Product[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Product {
  id             String  @id @default(uuid())
  name           String
  description    String @db.Text   
  stock          Int    @default(0)
  thumbnail      String
  price          Float
  categoryId     String
  category       Category        @relation(fields: [categoryId], references: [id])
  reviews        Review[]
  specifications Specification[]
  productImages  ProductImage[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  variantOption  VariantOption[]
  orderItem OrderItem[]

  @@index([categoryId])
}

model Specification {
  id          String  @id @default(uuid())
  name       String
  value      String
  productId  String
  product    Product  @relation(fields: [productId], references: [id])

  @@index([productId])
}

model Review {
   id           String    @id @default(uuid())
  content       String
  rating        Decimal
  productId     String
  product       Product   @relation(fields: [productId], references: [id])
  userId        String
  user          Users     @relation(fields: [userId], references: [id])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  @@index([userId])
  @@index([productId])
}

model ProductImage {
  id        String   @id @default(uuid())
  url       String
  productId String
  product   Product  @relation(fields: [productId], references: [id])

  @@index([productId])
}


model VariantOption {
  id         String  @id @default(uuid())
  name       String
  stock      Int
  productId  String?
  product    Product?  @relation(fields: [productId], references: [id])

  @@index([productId])
}

model Orders {
  id        String    @id @default(uuid())
  orderItems OrderItem[] // Relation to OrderItem model
  isPaid     Boolean   @default(false)
  phone      String    @default("")
  address    String    @default("")
  totalPrice Float       @default(0)
  createdAt  DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  userEmail  String?   // Change the field name to "userEmail"
  user       Users?     @relation(fields: [userEmail], references: [email]) // Update the relation to use "userEmail"

  @@index([userEmail])
}


model OrderItem {
  id              String  @id @default(uuid())
  
  // Define a many-to-one relationship to the product
  productId       String
  productVariant  String?
  product         Product @relation(fields: [productId], references: [id])
  
  // Define a many-to-one relationship to the order
  orderId         String
  order           Orders   @relation(fields: [orderId], references: [id])



  @@index([orderId])
  @@index([productId])
}
